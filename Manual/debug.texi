@chapter Debug
In this chapter, we explain how grammars can be debugged.  Due to the
concurrent constraint-based implementation of the XDK solver, it
cannot tell you spot-on what went wrong e.g. if you do not get the
desired analysis.  Rather, debugging XDG grammars proceeds in an
indirect fashion, by individually turning off dimensions and
principles.

@section Too few solutions

Debugging is easiest with the GUI (@code{xdk.exe}). Here, the menu
@code{Dimensions} allows you to individually turn off the dimensions,
and the menu @code{Principles} to individually turn off the principles
of the grammar. Of course, this can also be done without the GUI by
changing the grammar itself (turn off dimensions or principles by not
using them).

Here is the basic recipe for debugging, e.g. in the case when a
sentence which should yield a solution does not.  For instance,
assuming that your grammar has two dimensions, first try the two
dimensions individually. If you do not get a failure then, but if you
do get a failure when using both of the dimensions, then something
about the interaction of the two dimensions must be wrong. That means
typically either that:
@itemize
@item a word is lexically ambiguous, and one of the entries
works only for one dimension, and the other only for the other
dimension, or
@item you are using a multi-dimensional principle which causes the
failure
@end itemize
If you also get a failure when only using one dimension at a time, you
can trace the failure by selectively turning off the principles on the
respective dimension. E.g. you can switch off the in and out
principles to see whether your valency specifications are causing the
failure etc..@footnote{If you switch off principles, the number of
solutions can increase wildly. In the Oz Explorer, you can press
@code{Ctrl-C} to immediately stop the search.}

@section Too many (structurally equivalent) solutions

If you get too many solutions, and each of the solutions is
structurally equivalent, a common cause is the combination of two
things: 1) that your grammar generates too many lexical entries, and
2) you use the principle @code{principle.entries}
(@ref{Entries}). This principle enumerates all different lexical
entries, even if they make no structural difference.

The solution to this problem is twofold: 1) deactivate
"principle.entries", 2) reduce the number of disjunctions.  The reason
for 2) is that even though your grammar does not show it and the
solver can cope quite well with lexical ambiguity, it is always wise
to keep the number of lexical entries as low as possible for
efficiency.  The key to doing that is to encode the disjunction into
sets. For example,

@example
...
dim idlp @{end: @{iobj: @{ff | iosf | piosf@} @} @} @}
...
@end example
generates three lexical entries, whereas:
@example
...
dim idlp @{end: @{iobj: @{ff iosf piosf@} @} @} @}
...
@end example
only generates one and has the same effect: the indirect object
(@code{iobj}) can either go into the @code{ff}, the @code{iosf}, or
the @code{piosf}.

This encoding of disjunctions into sets also works for in valencies: you
could encode:
@example
...
dim id @{obj? | iobj?@}
...
@end example
into
@example
...
dim id @{obj? iobj?@}
...
@end example
given that the models on the id dimension are always trees, which
means each node can have at most one incoming edge, which in turn
means that the incoming edge in the example can only be obj or iobj,
but not both.
